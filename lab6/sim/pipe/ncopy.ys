#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 任柏俊 521021910788
# My strategies:
# 1. Utilize loop unrolling to reduce stall/bubble.
# 2. Convert several instructions to `iaddq`.
# 3. Create a jump table, alleviate the corner case judging overheads.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

# %rax : @return count of positive number
# %rdx : @param len (long)
# %rdi : @param src (long*)
# %rsi : @param dst (long*)
##################################################################

	# xorq %rax, %rax # set %rax to 0
    # andq %rdx, %rdx
    # jle Done # len <= 0

Test:
	iaddq $-8, %rdx # len -= 8
	jge Loop

Final:
    # iaddq $8, %rdx # recover
    # len \in [-7, 0]

    # Not use jump table
    # jle Done
    # iaddq $-1, %rdx
    # jle L1
    # iaddq $-1, %rdx
    # jle L2
    # jmp L3

    # Use jump table
    addq %rdx, %rdx
    addq %rdx, %rdx
    addq %rdx, %rdx # len = range(-64, 0, 8)
    mrmovq Case(%rdx), %rdx
    pushq %rdx
    ret

Loop: # main loop, handle 8 data
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10
    mrmovq 24(%rdi), %r11
    mrmovq 32(%rdi), %r12
    mrmovq 40(%rdi), %r13
    mrmovq 48(%rdi), %r14
    mrmovq 56(%rdi), %rcx
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
    rmmovq %r12, 32(%rsi)
    rmmovq %r13, 40(%rsi)
    rmmovq %r14, 48(%rsi)
    rmmovq %rcx, 56(%rsi)

	andq %r8, %r8
	jle Not_Add0
	iaddq $1, %rax
Not_Add0:
	andq %r9, %r9
	jle Not_Add1
	iaddq $1, %rax
Not_Add1:
	andq %r10, %r10
	jle Not_Add2
	iaddq $1, %rax
Not_Add2:
	andq %r11, %r11
	jle Not_Add3
	iaddq $1, %rax
Not_Add3:
    andq %r12, %r12
	jle Not_Add4
	iaddq $1, %rax
Not_Add4:
    andq %r13, %r13
	jle Not_Add5
	iaddq $1, %rax
Not_Add5:
    andq %r14, %r14
	jle Not_Add6
	iaddq $1, %rax
Not_Add6:
    andq %rcx, %rcx
	jle Not_Add7
	iaddq $1, %rax
Not_Add7:
    iaddq $64, %rdi
	iaddq $64, %rsi
	jmp Test

L1:
    mrmovq 48(%rdi), %r8
	rmmovq %r8, 48(%rsi)
    mrmovq 40(%rdi), %r9
	andq %r8, %r8
	jle L21
	iaddq $1, %rax
L2:
    mrmovq 40(%rdi), %r9
L21:
	rmmovq %r9, 40(%rsi)
    mrmovq 32(%rdi), %r10
	andq %r9, %r9
	jle L31
	iaddq $1, %rax
L3:
    mrmovq 32(%rdi), %r10
L31:
	rmmovq %r10, 32(%rsi)
    mrmovq 24(%rdi), %r11
	andq %r10, %r10
	jle L41
	iaddq $1, %rax
L4:
    mrmovq 24(%rdi), %r11
L41:
    mrmovq 16(%rdi), %r12
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jle L51
	iaddq $1, %rax
L5:
    mrmovq 16(%rdi), %r12
L51:
    mrmovq 8(%rdi), %r13
    rmmovq %r12, 16(%rsi)
    andq %r12, %r12
	jle L61
	iaddq $1, %rax
L6:
    mrmovq 8(%rdi), %r13
L61:
    mrmovq (%rdi), %r14
    rmmovq %r13, 8(%rsi)
    andq %r13, %r13
	jle L71
	iaddq $1, %rax
L7:
    mrmovq (%rdi), %r14
L71:
    rmmovq %r14, (%rsi)
    andq %r14, %r14
	jle L8
	iaddq $1, %rax
L8:
	ret

# Jump table, but slower
    .align 8
    .quad Done
    .quad L7
    .quad L6
    .quad L5
    .quad L4
    .quad L3
    .quad L2
    .quad L1
Case:
    .quad Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
